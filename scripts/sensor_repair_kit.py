#!/usr/bin/env python3
"""
Sensor Repair Kit - Targeted solutions for Error 0x03
Based on troubleshooting results showing perfect communication but imaging failure
"""

import serial
import time
import os

class SensorRepairKit:
    """Targeted repair solutions for imaging issues"""
    
    def __init__(self):
        self.port = '/dev/ttyUSB0'
        self.baud = 57600
        self.sensor = None
    
    def connect(self):
        """Connect to sensor"""
        try:
            self.sensor = serial.Serial(
                port=self.port,
                baudrate=self.baud,
                timeout=3,
                write_timeout=3
            )
            time.sleep(0.5)
            return True
        except Exception as e:
            print(f"‚ùå Connection failed: {e}")
            return False
    
    def test_sensor_response(self):
        """Quick sensor response test"""
        if not self.connect():
            return False
        
        try:
            handshake = bytes([0xEF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x03, 0x01, 0x00, 0x05])
            self.sensor.write(handshake)
            self.sensor.flush()
            time.sleep(0.5)
            
            response = self.sensor.read(12)
            if response and len(response) >= 9:
                error_code = response[8]
                print(f"üì° Sensor response: 0x{error_code:02X}")
                return error_code
            return None
        except Exception as e:
            print(f"‚ùå Test failed: {e}")
            return None
        finally:
            if self.sensor:
                self.sensor.close()
    
    def guided_cleaning_process(self):
        """Step-by-step cleaning guide"""
        print("üßΩ GUIDED SENSOR CLEANING PROCESS")
        print("=" * 50)
        print()
        print("Your sensor has perfect communication but Error 0x03 (Imaging Fail).")
        print("This is almost always a surface contamination issue.")
        print()
        
        # Pre-cleaning test
        print("üìä PRE-CLEANING TEST")
        print("-" * 20)
        error_code = self.test_sensor_response()
        if error_code == 0x03:
            print("‚úÖ Confirmed: Error 0x03 (Imaging Fail)")
        print()
        
        # Cleaning steps
        cleaning_steps = [
            {
                'step': 1,
                'title': 'POWER OFF SYSTEM',
                'instructions': [
                    "‚Ä¢ Disconnect USB cable from Raspberry Pi",
                    "‚Ä¢ Wait 10 seconds for complete power down",
                    "‚Ä¢ This prevents damage during cleaning"
                ]
            },
            {
                'step': 2,
                'title': 'PREPARE CLEANING MATERIALS',
                'instructions': [
                    "‚Ä¢ Get isopropyl alcohol (70% or higher)",
                    "‚Ä¢ Get soft, lint-free cloth (microfiber preferred)",
                    "‚Ä¢ Get cotton swabs (optional for edges)",
                    "‚Ä¢ Ensure good lighting to see sensor surface"
                ]
            },
            {
                'step': 3,
                'title': 'INSPECT SENSOR SURFACE',
                'instructions': [
                    "‚Ä¢ Look closely at the sensor surface",
                    "‚Ä¢ Check for: fingerprints, oils, dust, scratches",
                    "‚Ä¢ Note any visible contamination",
                    "‚Ä¢ The sensor should be smooth and clean"
                ]
            },
            {
                'step': 4,
                'title': 'CLEAN SENSOR SURFACE',
                'instructions': [
                    "‚Ä¢ Dampen cloth with isopropyl alcohol",
                    "‚Ä¢ Gently wipe sensor in circular motions",
                    "‚Ä¢ DO NOT press hard - light pressure only",
                    "‚Ä¢ Clean edges with cotton swab if needed",
                    "‚Ä¢ Repeat until surface looks completely clean"
                ]
            },
            {
                'step': 5,
                'title': 'DRY COMPLETELY',
                'instructions': [
                    "‚Ä¢ Let alcohol evaporate completely (30-60 seconds)",
                    "‚Ä¢ Ensure NO moisture remains",
                    "‚Ä¢ Surface should be completely dry",
                    "‚Ä¢ Check for any residue or streaks"
                ]
            },
            {
                'step': 6,
                'title': 'RECONNECT AND TEST',
                'instructions': [
                    "‚Ä¢ Reconnect USB cable to Raspberry Pi",
                    "‚Ä¢ Wait for system to recognize device",
                    "‚Ä¢ We'll test the sensor after cleaning"
                ]
            }
        ]
        
        for step_info in cleaning_steps:
            print(f"STEP {step_info['step']}: {step_info['title']}")
            print("-" * 30)
            for instruction in step_info['instructions']:
                print(instruction)
            print()
            
            if step_info['step'] < 6:  # Don't wait after last step
                input("Press Enter when this step is completed...")
                print()
        
        # Post-cleaning test
        print("üìä POST-CLEANING TEST")
        print("-" * 20)
        print("Testing sensor after cleaning...")
        
        time.sleep(2)  # Give time for reconnection
        error_code = self.test_sensor_response()
        
        if error_code == 0x00:
            print("üéâ SUCCESS! Sensor is now working!")
            print("‚úÖ Error 0x03 resolved by cleaning")
            return True
        elif error_code == 0x03:
            print("‚ö†Ô∏è Still getting Error 0x03")
            print("üí° Try additional solutions below")
            return False
        else:
            print(f"‚ö†Ô∏è Different response: 0x{error_code:02X}")
            return False
    
    def advanced_solutions(self):
        """Advanced solutions if cleaning doesn't work"""
        print("\nüîß ADVANCED SOLUTIONS")
        print("=" * 30)
        print()
        print("If cleaning didn't resolve Error 0x03, try these:")
        print()
        
        solutions = [
            {
                'title': 'FINGER TECHNIQUE',
                'steps': [
                    "‚Ä¢ Use a different finger (index finger works best)",
                    "‚Ä¢ Ensure finger is clean and dry",
                    "‚Ä¢ Press VERY firmly on sensor",
                    "‚Ä¢ Cover entire sensor surface",
                    "‚Ä¢ Hold completely still for 3-5 seconds",
                    "‚Ä¢ Don't slide or move finger during capture"
                ]
            },
            {
                'title': 'POWER SUPPLY CHECK',
                'steps': [
                    "‚Ä¢ Measure voltage at sensor VCC pin",
                    "‚Ä¢ Should be stable 3.3V or 5V",
                    "‚Ä¢ Check for voltage drops during operation",
                    "‚Ä¢ Try powered USB hub if using Pi USB",
                    "‚Ä¢ Consider external power supply"
                ]
            },
            {
                'title': 'WIRING VERIFICATION',
                'steps': [
                    "‚Ä¢ Double-check all connections:",
                    "  - VCC to 3.3V or 5V",
                    "  - GND to Ground",
                    "  - TX (sensor) to RX (CP210x)",
                    "  - RX (sensor) to TX (CP210x)",
                    "‚Ä¢ Ensure no loose connections",
                    "‚Ä¢ Try different jumper wires"
                ]
            },
            {
                'title': 'SENSOR HARDWARE',
                'steps': [
                    "‚Ä¢ Sensor surface may be damaged",
                    "‚Ä¢ Check for scratches or cracks",
                    "‚Ä¢ Try different sensor if available",
                    "‚Ä¢ Some sensors are defective from factory",
                    "‚Ä¢ Contact supplier for replacement"
                ]
            }
        ]
        
        for i, solution in enumerate(solutions, 1):
            print(f"{i}. {solution['title']}")
            print("-" * 20)
            for step in solution['steps']:
                print(step)
            print()
    
    def test_with_optimized_settings(self):
        """Test with optimized settings after repair"""
        print("üß™ TESTING WITH OPTIMIZED SETTINGS")
        print("=" * 40)
        
        if not self.connect():
            return False
        
        try:
            # Test with extended timeouts and multiple attempts
            print("Testing with extended timeouts...")
            
            for attempt in range(5):
                print(f"Attempt {attempt + 1}/5...")
                
                # Clear buffers
                self.sensor.reset_input_buffer()
                self.sensor.reset_output_buffer()
                time.sleep(0.5)
                
                # Send command with extended timing
                handshake = bytes([0xEF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x03, 0x01, 0x00, 0x05])
                self.sensor.write(handshake)
                self.sensor.flush()
                time.sleep(2.0)  # Extended wait
                
                response = self.sensor.read(12)
                
                if response and len(response) >= 9:
                    error_code = response[8]
                    print(f"   Response: 0x{error_code:02X}")
                    
                    if error_code == 0x00:
                        print("üéâ SUCCESS! Sensor working with optimized settings!")
                        return True
                    elif error_code == 0x02:
                        print("   No finger detected")
                    elif error_code == 0x03:
                        print("   Still imaging fail")
                
                time.sleep(1)
            
            print("‚ùå Still not working with optimized settings")
            return False
            
        except Exception as e:
            print(f"‚ùå Test failed: {e}")
            return False
        finally:
            if self.sensor:
                self.sensor.close()

def main():
    """Main repair process"""
    print("üîß Fingerprint Sensor Repair Kit")
    print("=" * 40)
    print()
    print("Based on troubleshooting results:")
    print("‚úÖ Hardware: Working")
    print("‚úÖ Power: Working") 
    print("‚úÖ Communication: Working")
    print("‚ùå Imaging: Error 0x03 (Imaging Fail)")
    print()
    print("This indicates a sensor surface or hardware issue.")
    print()
    
    repair_kit = SensorRepairKit()
    
    # Step 1: Guided cleaning
    print("üßΩ SOLUTION 1: GUIDED CLEANING PROCESS")
    proceed = input("Start guided cleaning process? (Y/n): ").lower().strip()
    
    if proceed != 'n':
        success = repair_kit.guided_cleaning_process()
        
        if success:
            print("\nüéâ REPAIR SUCCESSFUL!")
            print("Your sensor is now working. Try enrollment:")
            print("python3 scripts/fingerprint_controller_optimized.py")
            return
    
    # Step 2: Advanced solutions
    print("\nüîß SOLUTION 2: ADVANCED TROUBLESHOOTING")
    repair_kit.advanced_solutions()
    
    # Step 3: Test with optimized settings
    print("üß™ SOLUTION 3: OPTIMIZED SETTINGS TEST")
    proceed = input("Test with optimized settings? (Y/n): ").lower().strip()
    
    if proceed != 'n':
        success = repair_kit.test_with_optimized_settings()
        
        if success:
            print("\nüéâ WORKING WITH OPTIMIZED SETTINGS!")
            print("Use the optimized controller for enrollment")
        else:
            print("\n‚ùå SENSOR HARDWARE ISSUE")
            print("üí° Recommendations:")
            print("‚Ä¢ Try different fingerprint sensor")
            print("‚Ä¢ Check sensor datasheet for specific requirements")
            print("‚Ä¢ Contact sensor manufacturer")
            print("‚Ä¢ Sensor may be defective")

if __name__ == "__main__":
    main()
